package ro.helator.dia.server;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.nio.file.Path;
import java.util.concurrent.LinkedBlockingQueue;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.pty4j.PtyProcess;
import com.terminalfx.TerminalTab;
import com.terminalfx.annotation.WebkitCall;
import com.terminalfx.config.TerminalConfig;

import javafx.event.ActionEvent;
import javafx.scene.Node;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.MenuItem;
import javafx.scene.control.Tab;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;
import netscape.javascript.JSObject;

public class TerminalTab extends Tab {

	private WebView webView;
	private int columns = 150;
	private int rows = 15;
	private PtyProcess process;
	private BufferedReader inputReader;
	private BufferedReader errorReader;
	private BufferedWriter outputWriter;
	private Path terminalPath;
	private boolean isReady = false;
	private String[] termCommand;
	private LinkedBlockingQueue<String> commandQueue;
	private TerminalConfig terminalConfig = new TerminalConfig();
	
	public TerminalTab(TerminalConfig terminalConfig, Path terminalPath) {
		this.terminalConfig = terminalConfig;
		this.terminalPath = terminalPath;
		this.initialize();
	}
	
	public TerminalTab() {
		this.initialize();
	}

	public TerminalTab(String text) {
		super(text);
		this.initialize();
	}

	public TerminalTab(String text, Node content) {
		super(text, content);
		this.initialize();
	}
	
	public JSObject getWindow() {
		return (JSObject) this.webEngine().executeScript("window");
	}

	private WebEngine webEngine() {
		return this.webView.getEngine();
	}
	
	public void initialize() {
		this.commandQueue = new LinkedBlockingQueue();
		this.webView = new WebView();
		this.webView.getEngine().getLoadWorker().stateProperty().addListener((observable, oldValue, newValue) -> {
			this.getWindow().setMember("app", this);
		});
		this.webEngine().load(TerminalTab.class.getResource("/hterm.html").toExternalForm());
		String tabName = "";//this.getTabNameGenerator().next();
		this.setText(tabName);
	}
	
	@WebkitCall(from = "hterm")
	public String getPrefs() {
		try {
			return (new ObjectMapper()).writeValueAsString(this.getTerminalConfig());
		} catch (JsonProcessingException arg1) {
			throw new RuntimeException(arg1);
		}
	}
}
