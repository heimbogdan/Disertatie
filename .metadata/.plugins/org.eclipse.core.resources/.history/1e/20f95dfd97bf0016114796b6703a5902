package ro.helator.ie.util.wsdl;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import ro.helator.ie.util.FileUtil;

public class WSDLUtil {

	public static final String WSDL_EXTENSION = "?wsdl";
	public static final String WSDL_TMP_FILE = "./tmp/temp.wsdl";
	public static final String WSDL_FOLDER = "./wsdl/?/";
	public static final String WSDL_FILENAME = "WebServiceDefinition.wsdl";
	public static final String WSDL_SCHEMANAME = "schema_?.xsd";
	
	public static void getWsdlAndSave(String URL, String name) throws MalformedURLException, IOException, ParserConfigurationException{
		String wsdl = getWsdlAsString(URL);
		Document doc = FileUtil.convertStringToDocument(WSDLUtil.liniarizeWSDL(wsdl));
//		List<Document> list = extractInternalSchemas(doc);
		String folder = WSDL_FOLDER.replace("?", name);
		FileUtil.writeFile(new File(folder + WSDL_FILENAME), FileUtil.convertDocumentToString(doc, false, false));
//		for(Document schema : list){
//			FileUtil.writeFile(new File(folder + WSDL_SCHEMANAME.replace("?", (list.indexOf(schema) + 1) + "")),
//					FileUtil.convertDocumentToString(schema, true, true));
//		}
	}
	
	public static String getWsdlAsString(String  URL) throws MalformedURLException, IOException{
		
		URL url = new URL(formatURL(URL));
		URLConnection connection = url.openConnection();
		InputStream in = connection.getInputStream();
		
		File file = new File(WSDL_TMP_FILE);
		FileUtil.createNewFile(file);
		FileUtil.writeToFileFromInputStream(in, file);
		
		String content = FileUtil.readFile(file);
		file.delete();
		return content;
	}
	
	private static String formatURL(String  URL){
		String formatedUrl = URL;
		if(!URL.toLowerCase().endsWith(WSDL_EXTENSION)){
			formatedUrl += WSDL_EXTENSION;
		}
		return formatedUrl;
	}
	
//	public static List<Document> extractInternalSchemas(Document doc) throws ParserConfigurationException{
//		Element root = doc.getDocumentElement();
//		return extractInternalSchemas(root);
//	}
	
//	public static List<Document> extractInternalSchemas(Element root) throws ParserConfigurationException{
//		List<Document> schemas = new ArrayList<Document>();
//		extractInternalSchemas(root, schemas);
//		return schemas;
//	}
	
//	private static void extractInternalSchemas(Element root, List<Document> schemas) throws ParserConfigurationException{
//		NodeList nodes = root.getChildNodes();
//		int size = nodes.getLength();
//		for(int i = 0; i < size; i++){
//			Node node = nodes.item(i);
//			String name = node.getNodeName();
//			if(name != null){
//				String[] arr = name.split(":");
//				String localName = arr[arr.length-1];
//				if(localName.equals("schema")){
//					schemas.add(FileUtil.convertNodeToDocumet(node));
//					String namespace = getTargetNamespace(node);
//					clearChilds(node);
//					clearAttributes(node);
//					addImportNode(node, namespace, "./" + WSDL_SCHEMANAME.replace("?", schemas.size() + ""));
//					break;
//				} else if(node instanceof Element){
//					extractInternalSchemas((Element) node, schemas);
//				}
//			}
//		}
//	}
	
	public static String liniarizeWSDL(String wsdl){
		return wsdl.replaceAll("> +<", "><");
	}
	
	private static void clearChilds(Node node){
		while(node.hasChildNodes()){
			node.removeChild(node.getFirstChild());
		}
	}
	
	private static void clearAttributes(Node node){
		while (node.getAttributes().getLength() > 0) {
		    Node att = node.getAttributes().item(0);
		    node.getAttributes().removeNamedItem(att.getNodeName());
		}
	}
	
	private static void addImportNode(Node parent, String namespace, String Location){
		Element imp = parent.getOwnerDocument().createElementNS("http://www.w3.org/2001/XMLSchema", "xsd:import");
		imp.setAttribute("namespace", namespace);
		imp.setAttribute("schemaLocation", Location);
		parent.appendChild(imp);
	}
	
	private static String getTargetNamespace(Node node){
		Node ns = node.getAttributes().getNamedItem("targetNamespace");
		String nsVal= "";
		if(ns != null){
			nsVal = ns.getNodeValue();
		}
		return nsVal;
	}
}
