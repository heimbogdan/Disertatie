package ro.helator.ie.camel.implementations;

import java.io.File;
import java.io.InputStream;
import java.net.URL;
import java.util.Enumeration;
import java.util.List;
import java.util.Properties;
import java.util.function.Consumer;

import org.osgi.framework.Bundle;
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Deactivate;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ro.helator.ie.camel.interfaces.TemplateRegistryService;
import ro.helator.ie.camel.interfaces.TemplateScanerService;
import ro.helator.ie.camel.templates.IE_Camel_RouteTemplate;
import ro.helator.ie.camel.templates.TemplatesUtil;

@Component(name = TemplateScanerServiceImpl.COMPONENT_NAME)
public class TemplateScanerServiceImpl implements TemplateScanerService {

	private static final Logger log = LoggerFactory.getLogger(TemplateScanerServiceImpl.class);

	public static final String COMPONENT_NAME = "IE_Camel_TemplateScanerService";
	public static final String COMPONENT_LABEL = "IE_Camel_TemplateScanerService";

	private TemplateRegistryService templateReg;

	@Activate
	private void activate() {
		log.info("Activating component " + COMPONENT_LABEL);
	}

	@Deactivate
	public void deactivate() {
		log.info("Deactivating the " + COMPONENT_LABEL);
	}

	@Override
	public void register(Bundle bundle) {
		forEachTemplate(bundle, t -> {
			log.info("Register template [" + t + "]");
			templateReg.registerTemplate(new IE_Camel_RouteTemplate(t));
		});
	}

	@Override
	public void unregister(Bundle bundle) {
		forEachTemplate(bundle, t -> {
			log.info("Unregister template [" + t + "]");
			templateReg.unregisterTemplate(t);
		});
	}

	private void forEachTemplate(Bundle bundle, Consumer<String> consumer) {
		log.info("Scan for templates...");
		try {
			Enumeration<URL> entries = bundle.findEntries("templates", "*", false);
			while(entries.hasMoreElements()){
				log.info(entries.nextElement().getPath());
			}
		} catch (Exception e) {
			log.error(e.getMessage(), e);
		}
	}

	@Reference
	public void setTemplateReg(final TemplateRegistryService templateReg) {
		this.templateReg = templateReg;
	}

	public void unsetTemplateReg(final TemplateRegistryService templateReg) {
		this.templateReg = templateReg;
	}

}
