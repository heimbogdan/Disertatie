package ro.helator.ie.camel.implementations;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.UUID;

import org.apache.camel.CamelContext;
import org.apache.camel.main.Main;
import org.apache.camel.model.RouteDefinition;
import org.apache.camel.model.RoutesDefinition;
import org.osgi.framework.BundleContext;
import org.osgi.framework.FrameworkUtil;
import org.osgi.service.component.annotations.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ro.helator.ie.camel.IE_CamelActivator;
import ro.helator.ie.camel.interfaces.RouteFactoryBean;


@Component
public class RouteFactoryBeanImpl implements RouteFactoryBean {

	private static final Logger log = LoggerFactory.getLogger(RouteFactoryBeanImpl.class);

	private static final String ROUTE_TYPE = "route.type";
	private static final String ROUTE_SUBTYPE = "route.subtype";
	private static final String ROUTE_SUBTYPE_DEFAULT = "simple";

	private static final String SUBFOLDER_SEPARATOR = "/";

	private static final String TEMPLATE_FOLDER = "templates/routes/";
	private static final String TEMPLATE_FILE = "/template.xml";
	private static final String TEMPLATE_MAIN_PROPERTIES = "/template.properties";
	private static final String TEMPLATE_SUBTYPE_PROPERTIES = "/tokens.properties";


	@Override
	public void buildRoute(String fileName, String fileContent) {
		if (log.isInfoEnabled()) {
			log.info("Build Route for file [" + fileName + "]");
		}
		
		CamelContext context = IE_CamelActivator.getCamelContext();
		log.info("\nContext: " + context);

		InputStream routePropertiesInputStream = new ByteArrayInputStream(fileContent.getBytes());
		Properties routeProperties = new Properties();
		try {
			log.info("Load route properties file: [" + fileName + "]");
			routeProperties.load(routePropertiesInputStream);
			routePropertiesInputStream.close();

			String routeType = routeProperties.getProperty(ROUTE_TYPE);
			String routeSubtype = routeProperties.getProperty(ROUTE_SUBTYPE);

			String templateMainPropertiesString = getFileInput(TEMPLATE_MAIN_PROPERTIES, routeType);
			Properties templateMainProperties = new Properties();
			templateMainProperties.load(new ByteArrayInputStream(templateMainPropertiesString.getBytes()));

			String templateSubtypePropertiesString = getFileInput(TEMPLATE_SUBTYPE_PROPERTIES, routeType, routeSubtype);
			Properties templateSubtypeProperties = new Properties();
			templateSubtypeProperties.load(new ByteArrayInputStream(templateSubtypePropertiesString.getBytes()));

			String template = getFileInput(TEMPLATE_FILE, routeType, routeSubtype);

			log.info("Retrieve tokens...");
			List<String> tokens = retrieveTokens(templateMainProperties, templateSubtypeProperties);
			log.info("Tokents found: " + tokens.size());
			template = templateTokenResolver(template, tokens, routeProperties);
			log.info("Final template:\n" + template);
			RoutesDefinition routes = context.loadRoutesDefinition(new ByteArrayInputStream(template.getBytes()));

			log.info(routes.toString());
			List<RouteDefinition> routeList = routes.getRoutes();
			if (routeList != null && !routeList.isEmpty()) {
				for (RouteDefinition route : routeList) {
					String routeId = route.getId();
					log.info("Route: " + routeId);
					RouteDefinition r = context.getRouteDefinition(routeId);
					if (r != null) {
						context.stopRoute(routeId);
						context.removeRouteDefinition(r);
					}
				}
				context.addRouteDefinitions(routes.getRoutes());
			} else {
				if (log.isInfoEnabled()) {
					log.info("No routes found in [" + fileName + "]");
				}
			}
		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
		}
	}

	private static String readInputStream(FileInputStream stream) throws Exception {
		StringBuffer sb = new StringBuffer();
		String line = null;
		BufferedReader br = new BufferedReader(new InputStreamReader(stream, "UTF-8"));
		while ((line = br.readLine()) != null) {
			sb.append(line).append("\n");
		}
		return sb.toString();
	}

	private static List<String> retrieveTokens(Properties main, Properties subtype) {
		List<String> tokens = new ArrayList<String>();
		String[] subtypeTokens = subtype.getProperty("tokens").split(",");
		for (String subtypeToken : subtypeTokens) {
			String[] mainTokens = main.getProperty(subtypeToken).split(",");
			for (String mainToken : mainTokens) {
				tokens.add(mainToken);
			}
		}

		return tokens;
	}

	public static String getFileInput(String file, String... subfolders)
			throws FileNotFoundException, URISyntaxException {
		StringBuilder sb = new StringBuilder();
		for (String subfolder : subfolders) {
			if (sb.length() > 0) {
				sb.append(SUBFOLDER_SEPARATOR);
			}
			sb.append(subfolder);
		}
		InputStream ins = null;
		ByteArrayOutputStream out = null;
		String content = "";
		try {
			ins = new BufferedInputStream(RouteFactoryBean.class.getClassLoader()
					.getResourceAsStream(TEMPLATE_FOLDER + sb.toString() + file));
			out = new ByteArrayOutputStream();
			int nbytes = 0;
			byte[] buffer = new byte[100000];

			log.info(">> try to read from inputStream...");
			while ((nbytes = ins.read(buffer)) != -1) {
				out.write(buffer, 0, nbytes);
			}

			content = new String(out.toByteArray());
		} catch (Exception e) {
			log.error(e.getMessage(), e);
		} finally {
			try {
				ins.close();
			} catch (IOException e) {
				log.error(e.getMessage(), e);
			}
			try {
				out.close();
			} catch (IOException e) {
				log.error(e.getMessage(), e);
			}
		}

		log.info("\n\n INPUT STREAM:\n" + content);

		return content;
	}

	private static String templateTokenResolver(String template, List<String> tokens, Properties routeProperties) {
		log.info(">> Template token resolver");
		for (String token : tokens) {

			String value = routeProperties.getProperty(token);
			log.info("Token: " + token + " / Value: " + value);
			if (value != null && !value.isEmpty()) {
				template = template.replaceAll("%" + token.toUpperCase() + "%", value);
			}
		}
		return template.replace("%UUID%", UUID.randomUUID().toString());
	}

}
